<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
<!-- jquery 설정이 된 거. 즉 사용할 수 있게 된 거. 사용하려면 스크립트를 열기  -->
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>
<script type="text/javascript">
$(document).ready(function(){
	$("form").submit(function(e){
		//통신 --> 아작스 통신을 할 것.
		$.ajax({  
			url:"/m/loginProc",
			data:$("form").serialize(), 
			dataType:"json",  
			type:"get", 
			success:function(json) { 
				//성공하면 여기서 성공 결과를 보고 화면 처리를 하면 됨.
				console.log(json.uid, json.upw); //이렇게 하면 데이터가 안나옴. 당연함. 아직 loginOk.jsp의 제이슨에 값을 넣어주지 않았기 때문.
				//위의 값들이 존재한다면 어디로 가느냐.. 우리가 여기서 페이지 이동까지 할 필요는 없을 거 같음. 로그인 성공까지만 구성하면 될 거 같음.
				alert(json.uid + "님 환영합니다");
				document.location.href="bbs3.html";
			},
			error:function(err) { 
				//로그인실패
				console.log(err);
				alert("로그인 실패");
			}
		});
		
		//데이터 전송을 막는 방법: 이벤트를 매개변수로 받아서 preventDefault()를 치면 데이터가 가지 않음. 이를 이용해 이벤트를 중단 시킬 수 있음. 
		e.preventDefault(); //이벤트 중단
		return false; //return false를 통해서도 이벤트 중단 가능 둘 중에 하나 쓰면 됨. 
	});
});
</script>
</head>
<body>
	<fieldset>
		<form name="frm1" action="/m/loginProc"> <!-- mvc에 따르면 서블릿으로 가야됨.  -->
			<input type="text" name="uid">
			<input type="password" name="upw">
			<input type="submit" value="로그인">
		</form>
	</fieldset>
	<a href="join.jsp">회원가입</a> > <!-- 모델2니까 회원가입은 서블릿으로 가야됨.  -->
</body>
</html>
<!-- 이렇게 jsp에서 직관적으로 흐름에 맞춰서 짜는게 model1 방식 -->